// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-import-cantabular-dataset/event"
	"github.com/ONSdigital/dp-import-cantabular-dataset/service"
	"github.com/ONSdigital/dp-kafka/v3"
	"sync"
)

var (
	lockProcessorMockConsume sync.RWMutex
)

// Ensure, that ProcessorMock does implement service.Processor.
// If this is not the case, regenerate this file with moq.
var _ service.Processor = &ProcessorMock{}

// ProcessorMock is a mock implementation of service.Processor.
//
//     func TestSomethingThatUsesProcessor(t *testing.T) {
//
//         // make and configure a mocked service.Processor
//         mockedProcessor := &ProcessorMock{
//             ConsumeFunc: func(in1 context.Context, in2 kafka.IConsumerGroup, in3 event.Handler)  {
// 	               panic("mock out the Consume method")
//             },
//         }
//
//         // use mockedProcessor in code that requires service.Processor
//         // and then make assertions.
//
//     }
type ProcessorMock struct {
	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(in1 context.Context, in2 kafka.IConsumerGroup, in3 event.Handler)

	// calls tracks calls to the methods.
	calls struct {
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 kafka.IConsumerGroup
			// In3 is the in3 argument value.
			In3 event.Handler
		}
	}
}

// Consume calls ConsumeFunc.
func (mock *ProcessorMock) Consume(in1 context.Context, in2 kafka.IConsumerGroup, in3 event.Handler) {
	if mock.ConsumeFunc == nil {
		panic("ProcessorMock.ConsumeFunc: method is nil but Processor.Consume was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 kafka.IConsumerGroup
		In3 event.Handler
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockProcessorMockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	lockProcessorMockConsume.Unlock()
	mock.ConsumeFunc(in1, in2, in3)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//     len(mockedProcessor.ConsumeCalls())
func (mock *ProcessorMock) ConsumeCalls() []struct {
	In1 context.Context
	In2 kafka.IConsumerGroup
	In3 event.Handler
} {
	var calls []struct {
		In1 context.Context
		In2 kafka.IConsumerGroup
		In3 event.Handler
	}
	lockProcessorMockConsume.RLock()
	calls = mock.calls.Consume
	lockProcessorMockConsume.RUnlock()
	return calls
}
