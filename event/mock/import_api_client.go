// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-import-cantabular-dataset/event"
	"sync"
)

var (
	lockImportAPIClientMockUpdateImportJobState sync.RWMutex
)

// Ensure, that ImportAPIClientMock does implement event.ImportAPIClient.
// If this is not the case, regenerate this file with moq.
var _ event.ImportAPIClient = &ImportAPIClientMock{}

// ImportAPIClientMock is a mock implementation of event.ImportAPIClient.
//
//     func TestSomethingThatUsesImportAPIClient(t *testing.T) {
//
//         // make and configure a mocked event.ImportAPIClient
//         mockedImportAPIClient := &ImportAPIClientMock{
//             UpdateImportJobStateFunc: func(in1 context.Context, in2 string, in3 string, in4 string) error {
// 	               panic("mock out the UpdateImportJobState method")
//             },
//         }
//
//         // use mockedImportAPIClient in code that requires event.ImportAPIClient
//         // and then make assertions.
//
//     }
type ImportAPIClientMock struct {
	// UpdateImportJobStateFunc mocks the UpdateImportJobState method.
	UpdateImportJobStateFunc func(in1 context.Context, in2 string, in3 string, in4 string) error

	// calls tracks calls to the methods.
	calls struct {
		// UpdateImportJobState holds details about calls to the UpdateImportJobState method.
		UpdateImportJobState []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 string
			// In4 is the in4 argument value.
			In4 string
		}
	}
}

// UpdateImportJobState calls UpdateImportJobStateFunc.
func (mock *ImportAPIClientMock) UpdateImportJobState(in1 context.Context, in2 string, in3 string, in4 string) error {
	if mock.UpdateImportJobStateFunc == nil {
		panic("ImportAPIClientMock.UpdateImportJobStateFunc: method is nil but ImportAPIClient.UpdateImportJobState was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
		In3 string
		In4 string
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	lockImportAPIClientMockUpdateImportJobState.Lock()
	mock.calls.UpdateImportJobState = append(mock.calls.UpdateImportJobState, callInfo)
	lockImportAPIClientMockUpdateImportJobState.Unlock()
	return mock.UpdateImportJobStateFunc(in1, in2, in3, in4)
}

// UpdateImportJobStateCalls gets all the calls that were made to UpdateImportJobState.
// Check the length with:
//     len(mockedImportAPIClient.UpdateImportJobStateCalls())
func (mock *ImportAPIClientMock) UpdateImportJobStateCalls() []struct {
	In1 context.Context
	In2 string
	In3 string
	In4 string
} {
	var calls []struct {
		In1 context.Context
		In2 string
		In3 string
		In4 string
	}
	lockImportAPIClientMockUpdateImportJobState.RLock()
	calls = mock.calls.UpdateImportJobState
	lockImportAPIClientMockUpdateImportJobState.RUnlock()
	return calls
}
