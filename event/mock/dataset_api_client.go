// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/dataset"
	"github.com/ONSdigital/dp-import-cantabular-dataset/event"
	"sync"
)

var (
	lockDatasetAPIClientMockPutInstanceState sync.RWMutex
)

// Ensure, that DatasetAPIClientMock does implement event.DatasetAPIClient.
// If this is not the case, regenerate this file with moq.
var _ event.DatasetAPIClient = &DatasetAPIClientMock{}

// DatasetAPIClientMock is a mock implementation of event.DatasetAPIClient.
//
//     func TestSomethingThatUsesDatasetAPIClient(t *testing.T) {
//
//         // make and configure a mocked event.DatasetAPIClient
//         mockedDatasetAPIClient := &DatasetAPIClientMock{
//             PutInstanceStateFunc: func(in1 context.Context, in2 string, in3 string, in4 dataset.State, in5 string) (string, error) {
// 	               panic("mock out the PutInstanceState method")
//             },
//         }
//
//         // use mockedDatasetAPIClient in code that requires event.DatasetAPIClient
//         // and then make assertions.
//
//     }
type DatasetAPIClientMock struct {
	// PutInstanceStateFunc mocks the PutInstanceState method.
	PutInstanceStateFunc func(in1 context.Context, in2 string, in3 string, in4 dataset.State, in5 string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// PutInstanceState holds details about calls to the PutInstanceState method.
		PutInstanceState []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 string
			// In4 is the in4 argument value.
			In4 dataset.State
			// In5 is the in5 argument value.
			In5 string
		}
	}
}

// PutInstanceState calls PutInstanceStateFunc.
func (mock *DatasetAPIClientMock) PutInstanceState(in1 context.Context, in2 string, in3 string, in4 dataset.State, in5 string) (string, error) {
	if mock.PutInstanceStateFunc == nil {
		panic("DatasetAPIClientMock.PutInstanceStateFunc: method is nil but DatasetAPIClient.PutInstanceState was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
		In3 string
		In4 dataset.State
		In5 string
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
		In5: in5,
	}
	lockDatasetAPIClientMockPutInstanceState.Lock()
	mock.calls.PutInstanceState = append(mock.calls.PutInstanceState, callInfo)
	lockDatasetAPIClientMockPutInstanceState.Unlock()
	return mock.PutInstanceStateFunc(in1, in2, in3, in4, in5)
}

// PutInstanceStateCalls gets all the calls that were made to PutInstanceState.
// Check the length with:
//     len(mockedDatasetAPIClient.PutInstanceStateCalls())
func (mock *DatasetAPIClientMock) PutInstanceStateCalls() []struct {
	In1 context.Context
	In2 string
	In3 string
	In4 dataset.State
	In5 string
} {
	var calls []struct {
		In1 context.Context
		In2 string
		In3 string
		In4 dataset.State
		In5 string
	}
	lockDatasetAPIClientMockPutInstanceState.RLock()
	calls = mock.calls.PutInstanceState
	lockDatasetAPIClientMockPutInstanceState.RUnlock()
	return calls
}
